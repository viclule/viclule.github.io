<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>image processing on Vicente Guerrero</title>
    <link>https://vicenteguerrero.tech/tags/image-processing/</link>
    <description>Recent content in image processing on Vicente Guerrero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://vicenteguerrero.tech/tags/image-processing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harris corner detector on PyCUDA</title>
      <link>https://vicenteguerrero.tech/posts/pycuda-corner-detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/pycuda-corner-detector/</guid>
      <description>A first intruduction to GPU programming Visit the github repository for the full code. GitHub
The function devides the image in four different parts to process them on different streams.
These are the execution times for the different implementations:
Python Code -&amp;gt; ≈2.22 seconds PyCUDA – single stream -&amp;gt; ≈0.0018 seconds PyCUDA – four streams (with concurrency) -&amp;gt; ≈0.0015 seconds This is the image used to test the code:</description>
    </item>
    
    <item>
      <title>Multilinear Interpolation in tensorflow</title>
      <link>https://vicenteguerrero.tech/posts/multilinear-interpolation-tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/multilinear-interpolation-tensorflow/</guid>
      <description>Extension of the tf.image.resize_bilinear to the N dimensional case Visit the github repository for the full code. GitHub
The function extends the functionality of tf.image.resize_bilinear for N dimensional Tensors.
Strategy The strategy is fairly simple, tensors are interpolated two dimensions at a time using the already existant tf.image.resize_bilinear function.
Test Building a 3D volume using a black image, an android image and a white image. [1, 245, 206, 3, 4] [1 batch, height, width, depth, 4 channels]</description>
    </item>
    
  </channel>
</rss>
