<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vicente Guerrero</title>
    <link>https://vicenteguerrero.tech/</link>
    <description>Recent content on Vicente Guerrero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://vicenteguerrero.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://vicenteguerrero.tech/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/about/</guid>
      <description>Hi there! I am a science enthusiast focused on python and rust software development, and machine learning.
I hold a BS in mechanical engineering, from the technical university of Celaya, Mexico, and a MS degree in mechatronics in 2010, from the technical university of Aachen (FH Aachen). Thanks to this I can understand engineering and computers.
For the first part of my carrer I focused in the developmet of algorithms for the alignment of optical components in optronic devices.</description>
    </item>
    
    <item>
      <title>Analytics and Algorithms</title>
      <link>https://vicenteguerrero.tech/projects/analytics-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/projects/analytics-algorithms/</guid>
      <description>Modern systems and devices generate more data than never before and the tendency is to keep increasing. In previous years it was not feasible to extract value out of that data, but recent storage and processing price decreases are enabling new applications and business opportunities.
There are a wide range of applications:
Machinery cost reduction. Replace expensive sensors with models relying on available data Anomaly detection. Detect in real time malfunctioning of devices based on historical data.</description>
    </item>
    
    <item>
      <title>Backend Development</title>
      <link>https://vicenteguerrero.tech/projects/backend-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/projects/backend-development/</guid>
      <description>“In computer programming, an application programming interface (API) is a set of subroutine definitions, communication protocols, and tools for building software. In general terms, it is a set of clearly defined methods of communication among various components.
A good API makes it easier to develop a computer program by providing all the building blocks, which are then put together by the programmer.” Wikipedia
Backend development in Python/Java/Kotlin:
Integration with databases Integration in CI/CD Deployment to a cloud service, such as AWS print(&amp;#39;it can be done!</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://vicenteguerrero.tech/posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/</guid>
      <description>Multilinear Interpolation in tensorflow
Harris corner detector on PyCUDA
Swarm Particle Interpolation</description>
    </item>
    
    <item>
      <title>Contact me</title>
      <link>https://vicenteguerrero.tech/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/contact/</guid>
      <description>Vicente Guerrero
Mannsfelderstr. 1
Cologne 50968
Germany
Email: vic.lule@gmail.com</description>
    </item>
    
    <item>
      <title>Harris corner detector on PyCUDA</title>
      <link>https://vicenteguerrero.tech/posts/pycuda-corner-detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/pycuda-corner-detector/</guid>
      <description>A first intruduction to GPU programming Visit the github repository for the full code. GitHub
The function devides the image in four different parts to process them on different streams.
These are the execution times for the different implementations:
Python Code -&amp;gt; ≈2.22 seconds PyCUDA – single stream -&amp;gt; ≈0.0018 seconds PyCUDA – four streams (with concurrency) -&amp;gt; ≈0.0015 seconds This is the image used to test the code:</description>
    </item>
    
    <item>
      <title>Multilinear Interpolation in tensorflow</title>
      <link>https://vicenteguerrero.tech/posts/multilinear-interpolation-tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/multilinear-interpolation-tensorflow/</guid>
      <description>Extension of the tf.image.resize_bilinear to the N dimensional case Visit the github repository for the full code. GitHub
The function extends the functionality of tf.image.resize_bilinear for N dimensional Tensors.
Strategy The strategy is fairly simple, tensors are interpolated two dimensions at a time using the already existant tf.image.resize_bilinear function.
Test Building a 3D volume using a black image, an android image and a white image. [1, 245, 206, 3, 4] [1 batch, height, width, depth, 4 channels]</description>
    </item>
    
    <item>
      <title>Rust&amp;Python</title>
      <link>https://vicenteguerrero.tech/projects/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/projects/rust/</guid>
      <description>Python is great! Yes, but sometimes the language just can not do things fast enough. Luckily, the Python Community is very dynamic and open to ideas to solve this. One of this, is to use Rust in combination with Python to accelerate your code.
I can help you to identify and migrate to Rust the sections of your code that would benefit from it, keeping a Python API to keep the life of your developers simple.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://vicenteguerrero.tech/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/projects/</guid>
      <description>Backend Development
Analytics and Algorithms
Rust&amp;amp;Python</description>
    </item>
    
    <item>
      <title>Swarm Particle Interpolation</title>
      <link>https://vicenteguerrero.tech/posts/swarm-particle-interpolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vicenteguerrero.tech/posts/swarm-particle-interpolation/</guid>
      <description>Adapted to the N dimensional case Visit the github repository for the full code. GitHub
It is a professional implementation based on the article from Iran Macedo.
Theory “In computational science, particle swarm optimization (PSO) [1] is a computational method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. It solves a problem by having a population of candidate solutions, here dubbed particles, and moving these particles around in the search-space according to simple mathematical formulae over the particle&amp;rsquo;s position and velocity.</description>
    </item>
    
  </channel>
</rss>
